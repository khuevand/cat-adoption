// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum Sex {
  MALE
  FEMALE
  UNKNOWN
}

enum ApplicationStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  WITHDRAWN
}

enum CatStatus {
  AVAILABLE
  PENDING
  ADOPTED
  FOSTERED
}

enum Role {
  USER
  ADMIN
}

model User {
  id String @id
  name String? 
  email String? @unique
  role Role @default(USER)
  createdAt DateTime @default(now())
  applications Application[]
  donation Donation[]
  totalDonation Int @default(0)
  cat Cat[]
  listedCats Cat[] @relation("ListedByUser")
  decidedApps Application[] @relation("DecidedByUser")
  uploadedImages CatImage[] @relation("UploadedByUser")
}

model Donation {
  id String @id @default(cuid())
  total Int
  user User @relation(fields: [userId], references: [id])
  userId String
  createdAt DateTime @default(now())
}

model Application {
  id String @id @default(cuid())
  cat Cat @relation(fields: [catId], references: [id], onDelete: Cascade)
  catId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  status ApplicationStatus @default(PENDING)
  form Json

  decidedByUser User? @relation("DecidedByUser", fields: [decidedByUserId], references: [id], onDelete: SetNull)
  decidedByUserId String?
  decidedAt DateTime?
  decisionNote String?

  @@index([userId])
  @@index([catId, status])
  @@index([decidedByUserId])
  @@index([decidedAt])
}

model Cat {
  id String @id @default(cuid())
  name String
  breed String
  sex Sex @default(UNKNOWN)
  ageMonths Int
  desexed Boolean @default(false)
  vaccinated Boolean @default(false)
  microchipped Boolean @default(false)
  description String
  status CatStatus @default(AVAILABLE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner User? @relation(fields: [userId], references: [id])
  userId String ?

  listedBy User @relation("ListedByUser", fields: [listedByUserId], references: [id])
  listedByUserId String

  applications Application[]
  images CatImage[]
  primaryImageUrl String?

  @@index([ageMonths])
  @@index([sex])
  @@index([status])
  @@index([userId])
}

model CatImage {
  id String @id @default(cuid())
  cat Cat @relation(fields: [catId], references: [id], onDelete: Cascade)
  catId String
  url String
  sizeBytes Int?
  alt String?
  isPrimary Boolean @default(false)

  uploadedBy User @relation("UploadedByUser", fields: [uploadedByUserId], references: [id])
  uploadedByUserId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([catId, isPrimary])
}
